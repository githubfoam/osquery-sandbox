name: "linux osquery CI workflow"


on:
  push:
    branches: [ feature_githubactions ]
  # pull_request:
  #   branches: [ githubactions_powershell ]


jobs:

  # ubuntu-latest-job:
  #   name: "ubuntu-latest - Ubuntu 18.04.5 LTS"
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: hostnamectl status  
  #   # - name: "Set vagrant specific version"
  #   #   run: |
  #   #     set -x
  #   #     export VAGRANT_VERSION="2.2.14"
  #   #     echo $VAGRANT_VERSION
  #   #     sudo apt-get -qq update         
  #   - name: "Build Vagrant and Libvirt with KVM or QEMU"
  #     run: |
  #       set -x
  #       sudo apt-get -qq update
  #       sudo apt-get install -y cpu-checker bridge-utils dnsmasq-base ebtables libvirt-bin libvirt-dev qemu-kvm qemu-utils ruby-dev
  #       sudo systemctl status libvirtd
  #       sudo libvirtd --version
  #       egrep -q 'vmx|svm' /proc/cpuinfo && echo "virtualization is  supported" || echo "virtualization is not supported"
  #       sudo addgroup libvirtd
  #       sudo adduser  $(id -un) libvirtd
  #       sudo kvm-ok || true  
  #   - name: "Set vagrant specific version and install Vagrant from deb package"
  #     run: |
  #       set -x
  #       echo "============================================="
  #       echo "=============Installing Vagrant=============="
  #       export VAGRANT_VERSION="2.2.14"
  #       echo $VAGRANT_VERSION
  #       sudo wget -nv https://releases.hashicorp.com/vagrant/${VAGRANT_VERSION}/vagrant_${VAGRANT_VERSION}_x86_64.deb        
  #       sudo dpkg -i vagrant_${VAGRANT_VERSION}_x86_64.deb
  #       # sudo wget -nv https://releases.hashicorp.com/vagrant/2.2.14/vagrant_2.2.14_x86_64.deb
  #       # sudo dpkg -i vagrant_2.2.14_x86_64.deb
  #       vagrant version
  #       echo "============================================="
  #   # - name: "Install libvirt vagrant-mutate plugins"
  #   #   run: |
  #   #     set -x
  #   #     sudo vagrant plugin install vagrant-libvirt #The vagrant-libvirt plugin is required when using KVM on Linux
  #   #     sudo vagrant plugin install vagrant-mutate #Convert vagrant boxes to work with different providers
  #   #     sudo vagrant status
  #   #     sudo virsh list --all #show all running KVM/libvirt VMs
  #   - name: "Install libvirt vagrant-mutate plugins,vagrant boxes bento "
  #     run: |
  #       set -x
  #       sudo vagrant plugin install vagrant-libvirt #The vagrant-libvirt plugin is required when using KVM on Linux
  #       sudo vagrant plugin install vagrant-mutate #Convert vagrant boxes to work with different providers
  #       sudo vagrant status
  #       sudo virsh list --all #show all running KVM/libvirt VMs        
  #       sudo vagrant box add "bento/ubuntu-19.10" --provider=virtualbox
  #       sudo vagrant mutate "bento/ubuntu-19.10" libvirt
  #       sudo vagrant box add "bento/centos-7.7" --provider=virtualbox
  #       sudo vagrant mutate "bento/centos-7.7" libvirt
  #       sudo vagrant box add "bento/fedora-31" --provider=virtualbox
  #       sudo vagrant mutate "bento/fedora-31" libvirt
  #       sudo vagrant box add "bento/debian-10.1" --provider=virtualbox
  #       sudo vagrant mutate "bento/debian-10.1" libvirt
  #       vagrant box list #veridy installed boxes
  #       vagrant status #Check the status of the VMs to see that none of them have been created yet
  #       sudo vagrant up --provider=libvirt vg-osquery-01
  #       sudo vagrant status
  #       sudo vagrant global-status
  #       sudo virsh list --all #show all running KVM/libvirt VMs        
  #   # - name: "Install vagrant boxes bento "
  #   #   run: |
  #   #     set -x
  #   #     sudo vagrant up --provider=libvirt vg-osquery-01
  #   #     sudo vagrant status
  #   #     sudo vagrant global-status
  #   #     sudo virsh list --all #show all running KVM/libvirt VMs


  # ubuntu-1604-job:
  #   name: "osquery on ubuntu-16.04"
  #   runs-on: ubuntu-16.04
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: hostnamectl status  
  #   - name: "Install osquery "
  #     run: |
  #       set -o errexit
  #       set -o pipefail
  #       set -o nounset
  #       set -o xtrace
  #       echo "=============Installing Osquery debian arm64=============="
  #       export OSQUERY_KEY=1484120AC4E9F8A1A577AEEE97A80C63C9D8B80B
  #       sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $OSQUERY_KEY
  #       sudo add-apt-repository 'deb [arch=amd64] https://pkg.osquery.io/deb deb main'
  #       sudo apt-get update -qq && sudo apt-get install osquery -qqy
  #       sudo osqueryctl start osqueryd
  #       sudo osqueryctl status osqueryd

  # ubuntu-1804-job:
  #   name: "osquery onubuntu-18.04"
  #   runs-on: ubuntu-18.04
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: hostnamectl status  
  #   - name: "Install osquery "
  #     run: |
  #       set -o errexit
  #       set -o pipefail
  #       set -o nounset
  #       set -o xtrace
  #       echo "=============Installing Osquery debian arm64=============="
  #       export OSQUERY_KEY=1484120AC4E9F8A1A577AEEE97A80C63C9D8B80B
  #       sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $OSQUERY_KEY
  #       sudo add-apt-repository 'deb [arch=amd64] https://pkg.osquery.io/deb deb main'
  #       sudo apt-get update -qq && sudo apt-get install osquery -qqy
  #       sudo osqueryctl start osqueryd
  #       sudo osqueryctl status osqueryd

  # ubuntu-2004-job:
  #   name: "osquery on ubuntu-20.04"
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: hostnamectl status 
  #   - name: "Install osquery "
  #     run: |
  #       set -o errexit
  #       set -o pipefail
  #       set -o nounset
  #       set -o xtrace
  #       echo "=============Installing Osquery debian arm64=============="
  #       export OSQUERY_KEY=1484120AC4E9F8A1A577AEEE97A80C63C9D8B80B
  #       sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $OSQUERY_KEY
  #       sudo add-apt-repository 'deb [arch=amd64] https://pkg.osquery.io/deb deb main'
  #       sudo apt-get update -qq && sudo apt-get install osquery -qqy
  #       sudo osqueryctl start osqueryd
  #       sudo osqueryctl status osqueryd

  ubuntu-2004-job:
    name: "process accounting on ubuntu-20.04"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: hostnamectl status 
    - name: "Install osquery "
      run: |
        set -o errexit
        set -o pipefail
        set -o nounset
        set -o xtrace
        echo "=============process accounting on Linux=============="
        sudo apt-get update -qq
        sudo apt-get install acct -qqy
        whoami
        # sudo /usr/sbin/accton on
        # sudo dump-acct /var/log/account/pacct | tail

  ubuntu-2004-python3x-job:
    name: "Setting Up Python 3x on ubuntu-20.04"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: hostnamectl status 
    - name: "Install osquery "
      run: |
        set -o errexit
        set -o pipefail
        set -o nounset
        set -o xtrace
        echo "=============Setting Up Python 3x=============="
        sudo apt-get update -qq
        python3 -V
        whoami
        echo "=============Setting Up a Virtual Environment=="
        sudo apt-get install -qqy python3-venv
        mkdir environments && cd environments
        python3 -m venv my_env
        ls my_env
        source my_env/bin/activate
        echo "=============Setting Up Python 3x=============="
        python2 -V        
        # sudo /usr/sbin/accton on
        # sudo dump-acct /var/log/account/pacct | tail